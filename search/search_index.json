{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to Stat 614.01 - Data Analysis Using Statistical Software Course Information Class time: MoTuWeTh 5:45 - 7:20pm Classroom: Hunter North 305 Instructor: Bora Ferlengez Best way to reach to me is shooting a message in our Telegram chat (stats/software related comments/questions) or send a private message (personal issues) on Telegram. But if you want to send an email: bora.ferlengez@gmail.com Office hours : MoTuWeTh 5:00 - 5:30pm (HE924), or after class, or by appointment. Textbook: R by Example, by Jim Albert and Maria Rizzo. 2012. Free download from the Hunter College library website. ISBN: 978-1-4614-1364-6. Reference Textbook: Introduction to Statistics and Data Analysis, Peck, Olsen and Devore, 5th edition. ISBN:978-1-305-11534-7.","title":"Syllabus"},{"location":"#welcome-to-stat-61401-data-analysis-using-statistical-software","text":"","title":"Welcome to Stat 614.01 - Data Analysis Using Statistical Software"},{"location":"#course-information","text":"Class time: MoTuWeTh 5:45 - 7:20pm Classroom: Hunter North 305 Instructor: Bora Ferlengez Best way to reach to me is shooting a message in our Telegram chat (stats/software related comments/questions) or send a private message (personal issues) on Telegram. But if you want to send an email: bora.ferlengez@gmail.com Office hours : MoTuWeTh 5:00 - 5:30pm (HE924), or after class, or by appointment. Textbook: R by Example, by Jim Albert and Maria Rizzo. 2012. Free download from the Hunter College library website. ISBN: 978-1-4614-1364-6. Reference Textbook: Introduction to Statistics and Data Analysis, Peck, Olsen and Devore, 5th edition. ISBN:978-1-305-11534-7.","title":"Course Information"},{"location":"chapter_1_code_snippets/","text":"This is only a temporary page. I post the code snippets so that you don't have to type during the lecture. Simply copy and paste the code below to RStudio. In a few days, I'll add comments and turn this notebook to a proper webpage that contains the explanations, as well. Getting Started # example 1 temps = c(51.9, 51.8, 51.9, 53) (5/9) * (temps - 32) CT = c(48, 48.2, 48, 48.7) temps - CT # example 2 winner = c(185, 182, 182, 188, 188, 188, 185, 185, 177, 182, 182, 193, 183, 179, 179, 175) opponent = c(175, 193, 185, 187, 188, 173, 180, 177, 183, 185, 180, 180, 182, 178, 178, 173) length(winner) year = seq(from=2008, to=1948, by=-4) winner[4] = 189 winner[5] = 189 winner[4:5] = 189 mean(winner) mean(opponent) difference = winner - opponent data.frame(year, winner, opponent, difference) taller.won = winner > opponent table(taller.won) table(taller.won) / 16 * 100 barplot(rev(difference), xlab=\"Election years 1948 to 2008\", ylab=\"Height difference in cm\") # example 3 k = c(0, 1, 2, 3, 4) x = c(109, 65, 22, 3, 1) barplot(x, names.arg=k, ylab=\"Frequencies\", xlab = 'Number of deaths', main = 'Frequency distribution') p = x / sum(x) barplot(p, names.arg=k, ylab='Relative Frequencies', xlab = 'Number of deaths', main = 'Relative Freq Distr') r = sum(p * k) v = sum(x * (k - r)^2) / 199 f = r^k * exp(- r) / factorial(k) f = dpois(k, r) floor(200*f) x cbind(k, p, f) # Prussian horsekick data k = c(0, 1, 2, 3, 4) x = c(109, 65, 22, 3, 1) p = x / sum(x) #relative frequencies print(p) r = sum(k * p) #mean v = sum(x * (k - r)^2) / 199 #variance print(r) print(v) f = dpois(k, r) print(cbind(k, p, f)) getwd() setwd(\"/Users/boraferlengez/Dropbox/teaching/hunter college/stat614.01/lecture_notes\") getwd() y = rpois(200, lambda=.61) kicks = table(y) #table of sample frequencies kicks Theoretical = dpois(0:3, lambda=.61) Sample = kicks / 200 cbind(Theoretical, Sample) mean(y) var(y) The R Help System ?barplot help(barplot) ??dpois help.search(\"dpois\") example(mean) ?mean Functions # defining the function var.n = function(x){ v = var(x) n = NROW(x) v * (n - 1) / n } # using the function temps = c(51.9, 51.8, 51.9, 53) var(temps) var.n(temps) # if the definition is one line { } are not needed. f = function(x, a=1, b=1) x^(a-1) * (1-x)^(b-1) curve(f(x,2,5), from=0, to=1) Vectors and Matrices # creating a matrix from given data probs = c(.45, .05, .01, .48, .70, .50, .07, .25, .49) P = matrix(probs, nrow=3, ncol=3) P # naming rows and columns rownames(P) <- c(\"lower_old\", \"middle_old\", \"upper_old\") colnames(P) <- c(\"lower_new\", \"middle_new\", \"upper_new\") P rowSums(P) colSums(P) P[1, 3] P[1, ] P[,2] Q = matrix(c( 0.45, 0.48, 0.07, 0.05, 0.70, 0.25, 0.01, 0.50, 0.49), nrow=3, ncol=3, byrow=TRUE) Q Data Frames # displaying all data USArrests # sometimes there is too much data to display, # in those cases, displaying few top or bottom rows # is a good idea to see what kind of data we have head(USArrests) head(USArrests, 14) tail(USArrests) ## size/summary of data # number of observations, i.e. number of rows NROW(USArrests) # size of the data dim(USArrests) # column names names(USArrests) rownames(USArrests) # lists row names colnames(USArrests) # lists column names dimnames(USArrests) # lists both row and column names #structure of the data str(USArrests) # str short for structure # if you prefer to work with matrices: arrests = as.matrix(USArrests) str(arrests) summary(USArrests) # extracting data USArrests[\"California\", \"Murder\"] USArrests[\"California\", ] USArrests[, \"Murder\"] USArrests$Murder # to create a frequency histogram hist(USArrests[, \"Murder\"]) hist(USArrests$Murder) # to create a probability (relative frequency) histogram library(MASS) truehist(USArrests$Murder) hist(USArrests$Murder, prob=TRUE, breaks=\"scott\") USArrests$Murder Attaching a data frame # to save time, sometimes we attach a data frame so that we can use the # row/column names directly without the need of slicing or $ sign. attach(USArrests) # then we can call Murder instead of USArrests$Murder murder.pct = 100 * Murder / (Murder + Assault + Rape) # to detach detach(USArrests) Scatterplots and correlations attach(USArrests) plot(UrbanPop, Murder) pairs(USArrests) cor(UrbanPop, Murder) cor(USArrests) Importing Data http://www.r-tutor.com/r-introduction/data-frame/data-import","title":"01 - Chapter 1"},{"location":"chapter_1_code_snippets/#getting-started","text":"# example 1 temps = c(51.9, 51.8, 51.9, 53) (5/9) * (temps - 32) CT = c(48, 48.2, 48, 48.7) temps - CT # example 2 winner = c(185, 182, 182, 188, 188, 188, 185, 185, 177, 182, 182, 193, 183, 179, 179, 175) opponent = c(175, 193, 185, 187, 188, 173, 180, 177, 183, 185, 180, 180, 182, 178, 178, 173) length(winner) year = seq(from=2008, to=1948, by=-4) winner[4] = 189 winner[5] = 189 winner[4:5] = 189 mean(winner) mean(opponent) difference = winner - opponent data.frame(year, winner, opponent, difference) taller.won = winner > opponent table(taller.won) table(taller.won) / 16 * 100 barplot(rev(difference), xlab=\"Election years 1948 to 2008\", ylab=\"Height difference in cm\") # example 3 k = c(0, 1, 2, 3, 4) x = c(109, 65, 22, 3, 1) barplot(x, names.arg=k, ylab=\"Frequencies\", xlab = 'Number of deaths', main = 'Frequency distribution') p = x / sum(x) barplot(p, names.arg=k, ylab='Relative Frequencies', xlab = 'Number of deaths', main = 'Relative Freq Distr') r = sum(p * k) v = sum(x * (k - r)^2) / 199 f = r^k * exp(- r) / factorial(k) f = dpois(k, r) floor(200*f) x cbind(k, p, f) # Prussian horsekick data k = c(0, 1, 2, 3, 4) x = c(109, 65, 22, 3, 1) p = x / sum(x) #relative frequencies print(p) r = sum(k * p) #mean v = sum(x * (k - r)^2) / 199 #variance print(r) print(v) f = dpois(k, r) print(cbind(k, p, f)) getwd() setwd(\"/Users/boraferlengez/Dropbox/teaching/hunter college/stat614.01/lecture_notes\") getwd() y = rpois(200, lambda=.61) kicks = table(y) #table of sample frequencies kicks Theoretical = dpois(0:3, lambda=.61) Sample = kicks / 200 cbind(Theoretical, Sample) mean(y) var(y)","title":"Getting Started"},{"location":"chapter_1_code_snippets/#the-r-help-system","text":"?barplot help(barplot) ??dpois help.search(\"dpois\") example(mean) ?mean","title":"The R Help System"},{"location":"chapter_1_code_snippets/#functions","text":"# defining the function var.n = function(x){ v = var(x) n = NROW(x) v * (n - 1) / n } # using the function temps = c(51.9, 51.8, 51.9, 53) var(temps) var.n(temps) # if the definition is one line { } are not needed. f = function(x, a=1, b=1) x^(a-1) * (1-x)^(b-1) curve(f(x,2,5), from=0, to=1)","title":"Functions"},{"location":"chapter_1_code_snippets/#vectors-and-matrices","text":"# creating a matrix from given data probs = c(.45, .05, .01, .48, .70, .50, .07, .25, .49) P = matrix(probs, nrow=3, ncol=3) P # naming rows and columns rownames(P) <- c(\"lower_old\", \"middle_old\", \"upper_old\") colnames(P) <- c(\"lower_new\", \"middle_new\", \"upper_new\") P rowSums(P) colSums(P) P[1, 3] P[1, ] P[,2] Q = matrix(c( 0.45, 0.48, 0.07, 0.05, 0.70, 0.25, 0.01, 0.50, 0.49), nrow=3, ncol=3, byrow=TRUE) Q","title":"Vectors and Matrices"},{"location":"chapter_1_code_snippets/#data-frames","text":"# displaying all data USArrests # sometimes there is too much data to display, # in those cases, displaying few top or bottom rows # is a good idea to see what kind of data we have head(USArrests) head(USArrests, 14) tail(USArrests) ## size/summary of data # number of observations, i.e. number of rows NROW(USArrests) # size of the data dim(USArrests) # column names names(USArrests) rownames(USArrests) # lists row names colnames(USArrests) # lists column names dimnames(USArrests) # lists both row and column names #structure of the data str(USArrests) # str short for structure # if you prefer to work with matrices: arrests = as.matrix(USArrests) str(arrests) summary(USArrests) # extracting data USArrests[\"California\", \"Murder\"] USArrests[\"California\", ] USArrests[, \"Murder\"] USArrests$Murder # to create a frequency histogram hist(USArrests[, \"Murder\"]) hist(USArrests$Murder) # to create a probability (relative frequency) histogram library(MASS) truehist(USArrests$Murder) hist(USArrests$Murder, prob=TRUE, breaks=\"scott\") USArrests$Murder","title":"Data Frames"},{"location":"chapter_1_code_snippets/#attaching-a-data-frame","text":"# to save time, sometimes we attach a data frame so that we can use the # row/column names directly without the need of slicing or $ sign. attach(USArrests) # then we can call Murder instead of USArrests$Murder murder.pct = 100 * Murder / (Murder + Assault + Rape) # to detach detach(USArrests)","title":"Attaching a data frame"},{"location":"chapter_1_code_snippets/#scatterplots-and-correlations","text":"attach(USArrests) plot(UrbanPop, Murder) pairs(USArrests) cor(UrbanPop, Murder) cor(USArrests)","title":"Scatterplots and correlations"},{"location":"chapter_1_code_snippets/#importing-data","text":"http://www.r-tutor.com/r-introduction/data-frame/data-import","title":"Importing Data"},{"location":"intro_to_r/","text":"Lecture 1: Preliminaries R and RStudio R is a statistical computing environment: open source and free software for statistical computation and graphics and a computer language designed for typical statistical and graphical applications R is an interpreted language: You type some commands (via at terminal/command prompt or from a file called a script), and R processes those commands. In this course, we will use RStudio to interact with R . RStudio is an integrated development environment, in other words user friendly software to interact with a language. How to install R and RStudio You can install R from: https://cran.r-project.org/ You can install RStudio from: https://www.rstudio.com/products/rstudio/download/ Here's a webpage that explains the installation process in steps for different operating systems: https://techvidvan.com/tutorials/install-r/ Here's a Youtube tutorial for MacOS: https://www.youtube.com/watch?v=LanBozXJjOk&ab_channel=TomHenry-datasciencewithR Here's a Youtube tutorial for Windows: https://www.youtube.com/watch?v=TFGYlKvQEQ4&ab_channel=RProgramming-DDS Basic calculations in R You can use R as a calculator and let it process a one line operation: 1+2 3 Here's a tidy website that contains a list of useful operators: https://www.learnbyexample.org/r-operators/ In this course, we'll be doing more complex computations and we'll need to save the result of a computation to be used later in some other computation. For that reason, we have variables . You can think of a variable as a keyword you chose to store a particular piece of information (numerical, or text or even logical). In R , there are two ways to assign a value to a variable: using = and using <- First you type the name of the variable you chose, then you type = or <- and then you put what value you want to assign to that variable. That value can be the result of some calculation, can be the output of some function, it can be a number or text or logical value you want to store. # note that, when you make an assignment, you don't get an output. # if you're using RStudio, the variable and its value can be seen in the Environment pane a = 3 ^ 2 #(example: exponentiation) # if you want R to return the value of a variable to the console, you'll need to type the name a 9 b <- 8 %/% 3 #(example: integer division) b 2 # you can see the variables in RStudio in a nice, organized way in the Environment pane # but if you want to see a list of variables in the Console: ls() .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'b' Note that R is case sensitive, for example a and A are treated as different variable names. A = 7 a 9 A 7 If you want to update the value of a variable, you can do that of course. A = 10 # now the value of A is not 7 anymore, but 10. A 10 Basic Data Types in R Here's a nice reference for more on basic data types and data structures in R : https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/ There are 6 data types in R : character numeric (real or decimal) integer logical complex You can find out the type of an object using the typeof() function. We'll discuss functions below, but basically they are self-contained algorithms built to perform a specific task. A function expects a user to give arguments as input and based on the values of the arguments, a function produces an output. # character values are anything that is to be treated as text typeof(\"ab\") 'character' In the example above, we gave \"ab\" as the input to the function typeof() by typing \"ab\" between the parentheses, and the typeof() function returned us the type of \"ab\" as the output. # R will decide how to store the value unless you specify the data type manually typeof(2) 'double' (If you wonder why the word 'double', double just means a decimal number in double precision, i.e. two decimals after the decimal point.) # by using '' or \"\", we can tell R that we're using a characters typeof('2') 'character' You can store text in a variable as well. To store a text value, you'll need to use \" or ' . Otherwise, R thinks you're typing the name of a variable. # note the the ' signs between the \" signs are treated as apostrophes: mytext <- \"I'm having a great 'day' today.\" mytext 'I\\'m having a great \\'day\\' today.' The backslash before the apostrophe \\' is R 's way of remembering that ' sign is to be treated as an apostrophe, but not as a delimiter of some text data. # the backslashes above are to denote escape sequences # \\' tells R to treat the apostrophe as a character # to print nicely, you can use the cat() function cat(mytext) I'm having a great 'day' today. typeof(2L) # the L on the right tells R to store 2 as an integer 'integer' typeof(-12.4) 'double' typeof(T) 'logical' typeof(FALSE) 'logical' typeof(1+4i) 'complex' Basic Data Structures in R Data structures are ways to store (usually multiple) values together in a specific way. R has multiple data structures. The most important ones for us include: atomic vector list matrix data frame factors # you can think of vectors as lists/arrays # that contain items of the same type # the function c() below combines items to create vectors vec1 <- c(1,2,3,20,3) vec2 <- c(T,T,F,F,FALSE, TRUE) vec3 <- c('a','stats', '614', \"\\'\") vec4 <- c(2L, -5L) vec5 <- 1:10 length(vec1) 5 typeof(vec2) 'logical' typeof(vec3) 'character' cat(vec4) 2 -5 2*vec4 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 4 -10 vec5 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 4 5 6 7 8 9 10 vec6 <- vec5 - vec5 vec6 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 0 0 0 0 0 0 0 0 0 0 vec4 + vec6 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 2 -5 2 -5 2 -5 2 -5 2 -5 vec7 <- c(1,2,3) typeof(vec7) 'double' vec8 <- c(1L,2L,3L) typeof(vec8) 'integer' vec7 == vec8 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} TRUE TRUE TRUE # rdocumentation.org/packages/utils/versions/3.6.2/topics/str str(vec8) int [1:3] 1 2 3 How to add a new element vec9 <- c(vec8,4L) vec9 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 4 vec10 <- c(0L,vec9) vec10 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 0 1 2 3 4 How to create vectors from a sequence of numbers vec11 <- 1:10 vec11 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 4 5 6 7 8 9 10 vec12 <- seq(from = 1, to = 2, by = 0.1) vec12 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2 vec12 <- seq(from = 1, to = 20) vec12 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 Factors Factors are categorical variables in R vec13 = as.factor(c(\"Male\", \"Female\", \"Male\", \"Female\")) vec13 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} Male Female Male Female Levels : .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'Female' 'Male' # note that R automatically decides what the underlying data type is when creating a vector # the items in a vector need to be of the same data type. vec14 = c(1,TRUE,'A') class(vec14) 'character' Lists # what if we want to store items of different data types and keep the data types as they are? # we use lists mylist <- list(1,TRUE,'A') mylist 1 TRUE 'A' typeof(mylist) 'list' mylist2 <- list(mylist, c(1,2,3)) mylist2 1 TRUE 'A' .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 mylist3 <- c(mylist, c(1,2,3)) mylist3 1 TRUE 'A' 1 2 3 Data Frames You can think of data frames as lists of vectors of equal length. Or even better, like a spreadsheet. data.frame(vec1,vec2,vec3) Error in data.frame(vec1, vec2, vec3): arguments imply differing number of rows: 5, 6, 4 Traceback: 1. data.frame(vec1, vec2, vec3) 2. stop(gettextf(\"arguments imply differing number of rows: %s\", . paste(unique(nrows), collapse = \", \")), domain = NA) # since those vectors were of different lengths, R couldn't create a data frame. cat(length(vec1),length(vec2),length(vec3)) 5 6 4 vec15 <- c(vec1,-1) vec16 <- c('one', \"two\", vec3) cat(length(vec15),length(vec2),length(vec16)) 6 6 6 data.frame(vec15,vec2,vec16) A data.frame: 6 \u00d7 3 vec15 vec2 vec16 1 TRUE one 2 TRUE two 3 FALSE a 20 FALSE stats 3 FALSE 614 -1 TRUE ' df <- data.frame(a = vec15,b = vec2,c = vec16, d = vec2 + vec15) df A data.frame: 6 \u00d7 4 a b c d 1 TRUE one 2 2 TRUE two 3 3 FALSE a 3 20 FALSE stats 20 3 FALSE 614 3 -1 TRUE ' 0 Matrices # the matrix function creates a matrix below that contains 3 rows and 2 columns mymatrix = matrix(vec16, 3, 2) mymatrix A matrix: 3 \u00d7 2 of type chr one stats two 614 a ' # finding the transpose matrix t(mymatrix) A matrix: 2 \u00d7 3 of type chr one two a stats 614 ' Indexing # how to grab the second value of a vector vec3[2] 'stats' vec3 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '614' '\\'' 1:3 #means all the numbers between 1 and 3 (1 and 3 included) .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 # what if we want more values vec3[1:3] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '614' vec3[-1] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'stats' '614' '\\'' Filtering using Boolean values length(vec3) 4 vec3[c(T,T,F,T)] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '\\'' vec3[c(1,2,4)] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '\\'' vec3[5] NA # similar with lists, but remember: you get sublists mylist 1 TRUE 'A' mylist[1:2] 1 TRUE mylist[1] 1 typeof(mylist[1]) 'list' # to get the actual items mylist[[1]] 1 # giving names to items mylist4 <- list(\"a\" = vec1, \"vec2\" = vec2, namewithouthquotes = vec3, mynumber = 20, list(vec1, vec2, vec3), mean) mylist4 $a .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 $vec2 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} TRUE TRUE FALSE FALSE FALSE TRUE $namewithouthquotes .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '614' '\\'' $mynumber 20 [[5]] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} TRUE TRUE FALSE FALSE FALSE TRUE .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '614' '\\'' [[6]] function (x, ...) UseMethod(\"mean\") # we gave names to items in the list names(mylist4) .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'vec2' 'namewithouthquotes' 'mynumber' '' '' mylist4[1] $a = .list-inline {list-style: none; margin:0; padding: 0} .list-inline&gt;li {display: inline-block} .list-inline&gt;li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 mylist4[\"a\"] $a = .list-inline {list-style: none; margin:0; padding: 0} .list-inline&gt;li {display: inline-block} .list-inline&gt;li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 Slicing/indexing data frames df A data.frame: 6 \u00d7 4 a b c d 1 TRUE one 2 2 TRUE two 3 3 FALSE a 3 20 FALSE stats 20 3 FALSE 614 3 -1 TRUE ' 0 df$a .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 -1 df[\"a\"] A data.frame: 6 \u00d7 1 a 1 2 3 20 3 -1 df[[\"a\"]] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 -1 df[[1]] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 -1 df[1][4] Error in `[.data.frame`(df[1], 4): undefined columns selected Traceback: 1. df[1][4] 2. `[.data.frame`(df[1], 4) 3. stop(\"undefined columns selected\") # 1st column 4th row df[[1]][4] 20 df[[1]][4:6] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 20 3 -1 # first row 4th column df[1,4] 2 df[4,1] 20 df[1,] A data.frame: 1 \u00d7 4 a b c d 1 1 TRUE one 2 df[c(1,2,4),] A data.frame: 3 \u00d7 4 a b c d 1 1 TRUE one 2 2 2 TRUE two 3 4 20 FALSE stats 20 mymatrix A matrix: 3 \u00d7 2 of type chr one stats two 614 a ' mymatrix[1,2] 'stats' Functions new_sum <- function(value1, value2){ results <- value1 + value2 return(results) } new_sum(2,4) 6 new_division <- function(x,y){ return(y/x) } new_division(5,4) 0.8 new_division(y=4,x=5) 0.8 new_division function (x, y) { return(y/x) } ?mean Packages # installing a library install.packages(\"ggplot2\") Updating HTML index of packages in '.Library' Making 'packages.html' ... done # importing a library library(ggplot2) # once you import a library, you can call any function from that library ggplot(df, aes(a,b)) + geom_point()","title":"00 - Intro to R"},{"location":"intro_to_r/#lecture-1-preliminaries","text":"","title":"Lecture 1: Preliminaries"},{"location":"intro_to_r/#r-and-rstudio","text":"R is a statistical computing environment: open source and free software for statistical computation and graphics and a computer language designed for typical statistical and graphical applications R is an interpreted language: You type some commands (via at terminal/command prompt or from a file called a script), and R processes those commands. In this course, we will use RStudio to interact with R . RStudio is an integrated development environment, in other words user friendly software to interact with a language.","title":"R and RStudio"},{"location":"intro_to_r/#how-to-install-r-and-rstudio","text":"You can install R from: https://cran.r-project.org/ You can install RStudio from: https://www.rstudio.com/products/rstudio/download/ Here's a webpage that explains the installation process in steps for different operating systems: https://techvidvan.com/tutorials/install-r/ Here's a Youtube tutorial for MacOS: https://www.youtube.com/watch?v=LanBozXJjOk&ab_channel=TomHenry-datasciencewithR Here's a Youtube tutorial for Windows: https://www.youtube.com/watch?v=TFGYlKvQEQ4&ab_channel=RProgramming-DDS","title":"How to install R and RStudio"},{"location":"intro_to_r/#basic-calculations-in-r","text":"You can use R as a calculator and let it process a one line operation: 1+2 3 Here's a tidy website that contains a list of useful operators: https://www.learnbyexample.org/r-operators/ In this course, we'll be doing more complex computations and we'll need to save the result of a computation to be used later in some other computation. For that reason, we have variables . You can think of a variable as a keyword you chose to store a particular piece of information (numerical, or text or even logical). In R , there are two ways to assign a value to a variable: using = and using <- First you type the name of the variable you chose, then you type = or <- and then you put what value you want to assign to that variable. That value can be the result of some calculation, can be the output of some function, it can be a number or text or logical value you want to store. # note that, when you make an assignment, you don't get an output. # if you're using RStudio, the variable and its value can be seen in the Environment pane a = 3 ^ 2 #(example: exponentiation) # if you want R to return the value of a variable to the console, you'll need to type the name a 9 b <- 8 %/% 3 #(example: integer division) b 2 # you can see the variables in RStudio in a nice, organized way in the Environment pane # but if you want to see a list of variables in the Console: ls() .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'b' Note that R is case sensitive, for example a and A are treated as different variable names. A = 7 a 9 A 7 If you want to update the value of a variable, you can do that of course. A = 10 # now the value of A is not 7 anymore, but 10. A 10","title":"Basic calculations in R"},{"location":"intro_to_r/#basic-data-types-in-r","text":"Here's a nice reference for more on basic data types and data structures in R : https://swcarpentry.github.io/r-novice-inflammation/13-supp-data-structures/ There are 6 data types in R : character numeric (real or decimal) integer logical complex You can find out the type of an object using the typeof() function. We'll discuss functions below, but basically they are self-contained algorithms built to perform a specific task. A function expects a user to give arguments as input and based on the values of the arguments, a function produces an output. # character values are anything that is to be treated as text typeof(\"ab\") 'character' In the example above, we gave \"ab\" as the input to the function typeof() by typing \"ab\" between the parentheses, and the typeof() function returned us the type of \"ab\" as the output. # R will decide how to store the value unless you specify the data type manually typeof(2) 'double' (If you wonder why the word 'double', double just means a decimal number in double precision, i.e. two decimals after the decimal point.) # by using '' or \"\", we can tell R that we're using a characters typeof('2') 'character' You can store text in a variable as well. To store a text value, you'll need to use \" or ' . Otherwise, R thinks you're typing the name of a variable. # note the the ' signs between the \" signs are treated as apostrophes: mytext <- \"I'm having a great 'day' today.\" mytext 'I\\'m having a great \\'day\\' today.' The backslash before the apostrophe \\' is R 's way of remembering that ' sign is to be treated as an apostrophe, but not as a delimiter of some text data. # the backslashes above are to denote escape sequences # \\' tells R to treat the apostrophe as a character # to print nicely, you can use the cat() function cat(mytext) I'm having a great 'day' today. typeof(2L) # the L on the right tells R to store 2 as an integer 'integer' typeof(-12.4) 'double' typeof(T) 'logical' typeof(FALSE) 'logical' typeof(1+4i) 'complex'","title":"Basic Data Types in R"},{"location":"intro_to_r/#basic-data-structures-in-r","text":"Data structures are ways to store (usually multiple) values together in a specific way. R has multiple data structures. The most important ones for us include: atomic vector list matrix data frame factors # you can think of vectors as lists/arrays # that contain items of the same type # the function c() below combines items to create vectors vec1 <- c(1,2,3,20,3) vec2 <- c(T,T,F,F,FALSE, TRUE) vec3 <- c('a','stats', '614', \"\\'\") vec4 <- c(2L, -5L) vec5 <- 1:10 length(vec1) 5 typeof(vec2) 'logical' typeof(vec3) 'character' cat(vec4) 2 -5 2*vec4 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 4 -10 vec5 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 4 5 6 7 8 9 10 vec6 <- vec5 - vec5 vec6 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 0 0 0 0 0 0 0 0 0 0 vec4 + vec6 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 2 -5 2 -5 2 -5 2 -5 2 -5 vec7 <- c(1,2,3) typeof(vec7) 'double' vec8 <- c(1L,2L,3L) typeof(vec8) 'integer' vec7 == vec8 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} TRUE TRUE TRUE # rdocumentation.org/packages/utils/versions/3.6.2/topics/str str(vec8) int [1:3] 1 2 3","title":"Basic Data Structures in R"},{"location":"intro_to_r/#how-to-add-a-new-element","text":"vec9 <- c(vec8,4L) vec9 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 4 vec10 <- c(0L,vec9) vec10 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 0 1 2 3 4","title":"How to add a new element"},{"location":"intro_to_r/#how-to-create-vectors-from-a-sequence-of-numbers","text":"vec11 <- 1:10 vec11 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 4 5 6 7 8 9 10 vec12 <- seq(from = 1, to = 2, by = 0.1) vec12 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 1.1 1.2 1.3 1.4 1.5 1.6 1.7 1.8 1.9 2 vec12 <- seq(from = 1, to = 20) vec12 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20","title":"How to create vectors from a sequence of numbers"},{"location":"intro_to_r/#factors","text":"Factors are categorical variables in R vec13 = as.factor(c(\"Male\", \"Female\", \"Male\", \"Female\")) vec13 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} Male Female Male Female Levels : .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'Female' 'Male' # note that R automatically decides what the underlying data type is when creating a vector # the items in a vector need to be of the same data type. vec14 = c(1,TRUE,'A') class(vec14) 'character'","title":"Factors"},{"location":"intro_to_r/#lists","text":"# what if we want to store items of different data types and keep the data types as they are? # we use lists mylist <- list(1,TRUE,'A') mylist 1 TRUE 'A' typeof(mylist) 'list' mylist2 <- list(mylist, c(1,2,3)) mylist2 1 TRUE 'A' .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 mylist3 <- c(mylist, c(1,2,3)) mylist3 1 TRUE 'A' 1 2 3","title":"Lists"},{"location":"intro_to_r/#data-frames","text":"You can think of data frames as lists of vectors of equal length. Or even better, like a spreadsheet. data.frame(vec1,vec2,vec3) Error in data.frame(vec1, vec2, vec3): arguments imply differing number of rows: 5, 6, 4 Traceback: 1. data.frame(vec1, vec2, vec3) 2. stop(gettextf(\"arguments imply differing number of rows: %s\", . paste(unique(nrows), collapse = \", \")), domain = NA) # since those vectors were of different lengths, R couldn't create a data frame. cat(length(vec1),length(vec2),length(vec3)) 5 6 4 vec15 <- c(vec1,-1) vec16 <- c('one', \"two\", vec3) cat(length(vec15),length(vec2),length(vec16)) 6 6 6 data.frame(vec15,vec2,vec16) A data.frame: 6 \u00d7 3 vec15 vec2 vec16 1 TRUE one 2 TRUE two 3 FALSE a 20 FALSE stats 3 FALSE 614 -1 TRUE ' df <- data.frame(a = vec15,b = vec2,c = vec16, d = vec2 + vec15) df A data.frame: 6 \u00d7 4 a b c d 1 TRUE one 2 2 TRUE two 3 3 FALSE a 3 20 FALSE stats 20 3 FALSE 614 3 -1 TRUE ' 0","title":"Data Frames"},{"location":"intro_to_r/#matrices","text":"# the matrix function creates a matrix below that contains 3 rows and 2 columns mymatrix = matrix(vec16, 3, 2) mymatrix A matrix: 3 \u00d7 2 of type chr one stats two 614 a ' # finding the transpose matrix t(mymatrix) A matrix: 2 \u00d7 3 of type chr one two a stats 614 '","title":"Matrices"},{"location":"intro_to_r/#indexing","text":"# how to grab the second value of a vector vec3[2] 'stats' vec3 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '614' '\\'' 1:3 #means all the numbers between 1 and 3 (1 and 3 included) .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 # what if we want more values vec3[1:3] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '614' vec3[-1] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'stats' '614' '\\''","title":"Indexing"},{"location":"intro_to_r/#filtering-using-boolean-values","text":"length(vec3) 4 vec3[c(T,T,F,T)] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '\\'' vec3[c(1,2,4)] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '\\'' vec3[5] NA # similar with lists, but remember: you get sublists mylist 1 TRUE 'A' mylist[1:2] 1 TRUE mylist[1] 1 typeof(mylist[1]) 'list' # to get the actual items mylist[[1]] 1 # giving names to items mylist4 <- list(\"a\" = vec1, \"vec2\" = vec2, namewithouthquotes = vec3, mynumber = 20, list(vec1, vec2, vec3), mean) mylist4 $a .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 $vec2 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} TRUE TRUE FALSE FALSE FALSE TRUE $namewithouthquotes .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '614' '\\'' $mynumber 20 [[5]] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} TRUE TRUE FALSE FALSE FALSE TRUE .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'stats' '614' '\\'' [[6]] function (x, ...) UseMethod(\"mean\") # we gave names to items in the list names(mylist4) .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 'a' 'vec2' 'namewithouthquotes' 'mynumber' '' '' mylist4[1] $a = .list-inline {list-style: none; margin:0; padding: 0} .list-inline&gt;li {display: inline-block} .list-inline&gt;li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 mylist4[\"a\"] $a = .list-inline {list-style: none; margin:0; padding: 0} .list-inline&gt;li {display: inline-block} .list-inline&gt;li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3","title":"Filtering using Boolean values"},{"location":"intro_to_r/#slicingindexing-data-frames","text":"df A data.frame: 6 \u00d7 4 a b c d 1 TRUE one 2 2 TRUE two 3 3 FALSE a 3 20 FALSE stats 20 3 FALSE 614 3 -1 TRUE ' 0 df$a .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 -1 df[\"a\"] A data.frame: 6 \u00d7 1 a 1 2 3 20 3 -1 df[[\"a\"]] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 -1 df[[1]] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 1 2 3 20 3 -1 df[1][4] Error in `[.data.frame`(df[1], 4): undefined columns selected Traceback: 1. df[1][4] 2. `[.data.frame`(df[1], 4) 3. stop(\"undefined columns selected\") # 1st column 4th row df[[1]][4] 20 df[[1]][4:6] .list-inline {list-style: none; margin:0; padding: 0} .list-inline>li {display: inline-block} .list-inline>li:not(:last-child)::after {content: \"\\00b7\"; padding: 0 .5ex} 20 3 -1 # first row 4th column df[1,4] 2 df[4,1] 20 df[1,] A data.frame: 1 \u00d7 4 a b c d 1 1 TRUE one 2 df[c(1,2,4),] A data.frame: 3 \u00d7 4 a b c d 1 1 TRUE one 2 2 2 TRUE two 3 4 20 FALSE stats 20 mymatrix A matrix: 3 \u00d7 2 of type chr one stats two 614 a ' mymatrix[1,2] 'stats'","title":"Slicing/indexing data frames"},{"location":"intro_to_r/#functions","text":"new_sum <- function(value1, value2){ results <- value1 + value2 return(results) } new_sum(2,4) 6 new_division <- function(x,y){ return(y/x) } new_division(5,4) 0.8 new_division(y=4,x=5) 0.8 new_division function (x, y) { return(y/x) } ?mean","title":"Functions"},{"location":"intro_to_r/#packages","text":"# installing a library install.packages(\"ggplot2\") Updating HTML index of packages in '.Library' Making 'packages.html' ... done # importing a library library(ggplot2) # once you import a library, you can call any function from that library ggplot(df, aes(a,b)) + geom_point()","title":"Packages"}]}